/*
* Copyright © 2016-2024 by IntegrIT S.A. dba Hackolade.  All rights reserved.
*
* The copyright to the computer software herein is the property of IntegrIT S.A.
* The software may be used and/or copied only with the written permission of 
* IntegrIT S.A. or in accordance with the terms and conditions stipulated in 
* the agreement/contract under which the software has been supplied. 


In order to define custom properties for any object's properties pane, you may copy/paste from the following,
making sure that you maintain a proper JSON format.

			{
				"propertyName": "Simple text",
				"propertyKeyword": "simpletextProp",
				"propertyType": "text",
				"sampleGen": "&containerName|&entityName|&random|<value>"
			},
			{
				"propertyName": "Text area",
				"propertyKeyword": "textareaProp",
				"propertyTooltip": "Popup for multi-line text entry",
				"propertyType": "details",
				"template": "textarea"
			},
			{
				"propertyName": "Dropdown selection",
				"propertyKeyword": "dropdownProp",
				"propertyTooltip": "Select from list of options",
				"propertyType": "select",
				"options": [
					"Option 1",
					"Option 2",
					"Option 3",
					"Option 4"
				]
			},
			{
				"propertyName": "Numeric",
				"propertyKeyword": "numericProp",
				"propertyValidate": true,
				"propertyType": "numeric",
				"valueType": "number",
				"allowNegative": false,
				"sampleGen": "&containerName|&entityName|&random|<value>"
			},
			{
				"propertyName": "Checkbox",
				"propertyKeyword": "checkboxProp",
				"propertyType": "checkbox"
			},
			{
				"propertyName": "Group",
				"propertyType": "group",
				"propertyKeyword": "grpProp",
				"propertyTooltip": "",
				"structure": [
					{
						"propertyName": "Simple Grp Text",
						"propertyKeyword": "simpleGrpText",
						"propertyTooltip": "",
						"propertyType": "text"
					},
					{
						"propertyName": "Group Number",
						"propertyKeyword": "grpNumber",
						"propertyType": "numeric",
						"valueType": "number",
						"allowNegative": false
					}
				]
			},
// “groupInput” can have the following states - 0 items, 1 item, and many items.
// “blockInput” has only 2 states - 0 items or 1 item. 
// This gives us an easy way to represent it as an object and not as an array internally which is beneficial for processing 
// and forward-engineering in particular.
			{
				"propertyName": "Block",
				"propertyType": "block",
				"propertyKeyword": "grpProp",
				"propertyTooltip": "",
				"structure": [
					{
						"propertyName": "Simple Grp Text",
						"propertyKeyword": "simpleGrpText",
						"propertyTooltip": "",
						"propertyType": "text"
					},
					{
						"propertyName": "Group Number",
						"propertyKeyword": "grpNumber",
						"propertyType": "numeric",
						"valueType": "number",
						"allowNegative": false
					}
				]
			},
			{
				"propertyName": "Field List",
				"propertyKeyword": "keyList",
				"propertyType": "fieldList",
				"template": "orderedList"
			}, 
			{
				"propertyName": "List with attribute",
				"propertyKeyword": "keyListOrder",
				"propertyType": "fieldList",
				"template": "orderedList",
				"attributeList": [
					"ascending",
					"descending"
				]
			}

*/

[
	{
		"lowerTab": "Details",
		"structure": [
			{
				"propertyKeyword": "collectionName",
				"validation": {
					"regex": "^(^\\b_default\\b$|(?!(_|%))[a-zA-Z0-9%_\\-]{1,251})$",
					"required": true
				}
			},
			{
				"propertyKeyword": "code",
				"validation": {
					"regex": "^(^\\b_default\\b$|(?!(_|%))[a-zA-Z0-9%_\\-]{1,251})$"
				}
			},
			{
				"propertyName": "Description",
				"propertyKeyword": "description",
				"propertyTooltip": "description",
				"propertyType": "details",
				"template": "textarea"
			},
			{
				"propertyName": "If not exists",
				"propertyKeyword": "ifNotExists",
				"propertyTooltip": "This optional clause enables the statement to complete successfully when the specified collection already exists.",
				"defaultValue": true,
				"propertyType": "checkbox"
			},
			{
				"propertyName": "Comments",
				"propertyKeyword": "comments",
				"propertyTooltip": "comments",
				"propertyType": "details",
				"template": "textarea",
				"valueType": "string"
			}
		]
	},
	{
		"lowerTab": "Indexes",
		"structure": [
			{
				"propertyName": "indexes",
				"propertyType": "group",
				"propertyKeyword": "indexes",
				"shouldValidate": false,
				"propertyTooltip": "Click + to add an index",
				"erdIndexAbbr": "I",
				"structure": [
					{
						"propertyName": "Name",
						"propertyKeyword": "indxName",
						"shouldValidate": true,
						"propertyTooltip": "Index name",
						"propertyType": "text",
						"validation": {
							"regex": "^(?!(_|#))[A-Za-z0-9#_]{1,}"
						}
					},
					{
						"propertyName": "Activated",
						"propertyKeyword": "isActivated",
						"parentType": "indexes",
						"propertyType": "checkbox",
						"shouldValidate": false,
						"propertyTooltip": "Deactivated item will be not included in forward-engineering script"
					},
					{
						"template": "textarea",
						"propertyKeyword": "indxDescription",
						"propertyName": "Description",
						"propertyTooltip": "description",
						"propertyType": "details",
						"parentType": "indexes"
					},
					{
						"options": ["Primary", "Secondary", "Array", "Metadata"],
						"propertyKeyword": "indxType",
						"propertyName": "Type",
						"propertyType": "select",
						"parentType": "indexes"
					},
					{
						"propertyName": "Include missing",
						"propertyKeyword": "includeMissing",
						"parentType": "indexes",
						"propertyType": "checkbox",
						"shouldValidate": false,
						"propertyTooltip": "Include Missing property for leading key",
						"dependency": {
							"key": "indxType",
							"value": "Secondary"
						}
					},
					{
						"propertyType": "tagInput",

						"template": "collectiontree",
						"dependency": {
							"key": "indxType",
							"value": "Secondary"
						},
						"propertyKeyword": "indxKey",
						"propertyName": "Keys",
						"types": ["ascending", "descending"],
						"isCompositeKey": false,
						"parentType": "indexes",
						"templateOptions": {
							"entityName": false
						}
					},
					{
						"template": "textarea",
						"markdown": false,
						"dependency": {
							"key": "indxType",
							"value": "Secondary"
						},
						"propertyKeyword": "functionExpr",
						"propertyName": "Function expression",
						"propertyType": "details",
						"parentType": "indexes"
					},
					{
						"template": "textarea",
						"markdown": false,
						"dependency": {
							"key": "indxType",
							"value": "Array"
						},
						"propertyKeyword": "arrayExpr",
						"propertyName": "Array expression",
						"propertyTooltip": "Lets you map and filter the elements or attributes of a collection, object, or objects. It evaluates to an array of the operand expression that satisfies the WHEN clause, if specified.",
						"propertyType": "details",
						"parentType": "indexes"
					},
					{
						"template": "textarea",
						"markdown": false,
						"dependency": {
							"key": "indxType",
							"value": "Metadata"
						},
						"propertyKeyword": "metadataExpr",
						"propertyName": "Metadata expression",
						"propertyTooltip": "Enables you to return the metadata for a keyspace or document. To index a selected metadata field, you must use a nested expression containing the META() function and the required property, for example META().id.",
						"propertyType": "details",
						"parentType": "indexes"
					},
					{
						"options": ["", "Keys", "Expression"],
						"dependency": {
							"key": "indxType",
							"value": "Secondary"
						},
						"propertyKeyword": "partitionByHash",
						"propertyName": "Partition by hash",
						"propertyType": "select",
						"parentType": "indexes"
					},
					{
						"propertyType": "tagInput",

						"template": "collectiontree",
						"dependency": {
							"type": "and",
							"values": [
								{
									"key": "indxType",
									"value": "Secondary"
								},
								{
									"key": "partitionByHash",
									"value": "Keys"
								}
							]
						},
						"propertyKeyword": "partitionByHashKeys",
						"propertyName": "Partition by hash keys",
						"isCompositeKey": false,
						"parentType": "indexes",
						"templateOptions": {
							"entityName": false
						}
					},
					{
						"template": "textarea",
						"markdown": false,
						"dependency": {
							"type": "and",
							"values": [
								{
									"key": "indxType",
									"value": "Secondary"
								},
								{
									"key": "partitionByHash",
									"value": "Expression"
								}
							]
						},
						"propertyKeyword": "partitionByHashExpr",
						"propertyName": "Partition by hash clause",
						"propertyTooltip": "A field or an expression over a field representing a partition key. ",
						"propertyType": "details",
						"parentType": "indexes"
					},
					{
						"template": "textarea",
						"markdown": false,
						"dependency": {
							"type": "or",
							"values": [
								{
									"key": "indxType",
									"value": "Secondary"
								},
								{
									"key": "indxType",
									"value": "Array"
								}
							]
						},
						"propertyKeyword": "whereClause",
						"propertyName": "WHERE clause",
						"propertyTooltip": "Specifies predicates to qualify the subset of documents to include in the index.",
						"propertyType": "details",
						"parentType": "indexes"
					},
					{
						"dependency": {
							"type": "or",
							"values": [
								{
									"key": "indxType",
									"value": "Primary"
								},
								{
									"key": "indxType",
									"value": "Secondary"
								},
								{
									"key": "indxType",
									"value": "Array"
								}
							]
						},
						"propertyKeyword": "usingGSI",
						"propertyName": "Using GSI",
						"propertyTooltip": "In Couchbase Server 6.5 and later, the index type  must be Global Secondary Index (GSI). The USING GSI keywords are optional and may be omitted.",
						"propertyType": "checkbox",
						"parentType": "indexes"
					},
					{
						"structure": [
							{
								"addAction": "addCollectionGroupItem",

								"structure": [
									{
										"inputPlaceholder": "<node_name>:<port_number>",
										"propertyKeyword": "nodeName",
										"propertyName": "Node name",
										"propertyTooltip": "A node name passed to the nodes property must include the cluster administration port, by default 8091.",
										"propertyType": "text",
										"parentType": "nodes"
									}
								],
								"propertyKeyword": "nodes",
								"propertyName": "Nodes",
								"propertyTooltip": "An array of strings, each of which represents a node name.",
								"propertyType": "group",
								"parentType": "withOptions"
							},
							{
								"defaultValue": true,
								"propertyKeyword": "defer_build",
								"propertyName": "Defer build",
								"propertyTooltip": "Deferring building of the index with multiple indexes can optimize the expensive scan operation.",
								"propertyType": "checkbox",
								"parentType": "withOptions"
							},
							{
								"valueType": "number",
								"allowNegative": false,
								"propertyKeyword": "num_replica",
								"propertyName": "Nbr of replicas",
								"propertyTooltip": "Should be less than the number of index nodes in the cluster",
								"propertyType": "numeric",
								"parentType": "withOptions"
							}
						],
						"propertyKeyword": "withOptions",
						"propertyName": "WITH options",
						"propertyTooltip": "Specifies additional options for index.",
						"propertyType": "block",
						"parentType": "indexes"
					},
					{
						"addTimestampButton": false,
						"template": "textarea",
						"propertyKeyword": "indxComments",
						"propertyName": "Comments",
						"propertyTooltip": "comments",
						"propertyType": "details",
						"parentType": "indexes"
					}
				]
			}
		]
	}
]
